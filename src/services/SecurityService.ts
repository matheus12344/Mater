import * as Location from 'expo-location';
import { Alert, Linking } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface DriverVerification {
  id: string;
  name: string;
  photo: string;
  documentNumber: string;
  vehiclePlate: string;
  rating: number;
  verified: boolean;
}

interface LocationData {
  latitude: number;
  longitude: number;
  timestamp: number;
  accuracy: number;
}

interface EmergencyContact {
  name: string;
  phone: string;
  relationship: string;
}

class SecurityService {
  private static instance: SecurityService;
  private emergencyContacts: EmergencyContact[] = [];
  private locationHistory: LocationData[] = [];
  private isPanicModeActive: boolean = false;

  private constructor() {}

  public static getInstance(): SecurityService {
    if (!SecurityService.instance) {
      SecurityService.instance = new SecurityService();
    }
    return SecurityService.instance;
  }

  // Verifica√ß√£o de identidade do motorista
  async verifyDriverIdentity(driverId: string): Promise<DriverVerification> {
    try {
      // Aqui voc√™ implementaria a l√≥gica real de verifica√ß√£o
      // Por exemplo, consultando uma API de verifica√ß√£o de documentos
      const driverData: DriverVerification = {
        id: driverId,
        name: "Motorista Exemplo",
        photo: "url_da_foto",
        documentNumber: "123.456.789-00",
        vehiclePlate: "ABC1234",
        rating: 4.8,
        verified: true
      };

      await AsyncStorage.setItem(`driver_${driverId}`, JSON.stringify(driverData));
      return driverData;
    } catch (error) {
      console.error('Erro na verifica√ß√£o do motorista:', error);
      throw new Error('Falha na verifica√ß√£o do motorista');
    }
  }

  // Compartilhamento de localiza√ß√£o em tempo real
  async startLocationSharing(): Promise<void> {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        throw new Error('Permiss√£o de localiza√ß√£o negada');
      }

      // Inicia o monitoramento de localiza√ß√£o
      Location.watchPositionAsync(
        {
          accuracy: Location.Accuracy.High,
          timeInterval: 5000,
          distanceInterval: 10
        },
        (location) => {
          const locationData: LocationData = {
            latitude: location.coords.latitude,
            longitude: location.coords.longitude,
            timestamp: location.timestamp,
            accuracy: location.coords.accuracy ?? 0
          };

          this.locationHistory.push(locationData);
          // Limita o hist√≥rico a 100 posi√ß√µes
          if (this.locationHistory.length > 100) {
            this.locationHistory.shift();
          }

          // Aqui voc√™ implementaria a l√≥gica para enviar a localiza√ß√£o para o servidor
          this.sendLocationToServer(locationData);
        }
      );
    } catch (error) {
      console.error('Erro ao iniciar compartilhamento de localiza√ß√£o:', error);
      throw error;
    }
  }

  // Bot√£o de p√¢nico
  async activatePanicMode(): Promise<void> {
    try {
      this.isPanicModeActive = true;
      
      // Obt√©m a localiza√ß√£o atual
      const location = await Location.getCurrentPositionAsync({});
      
      // Envia alerta para autoridades
      await this.sendEmergencyAlert(location);
      
      // Notifica contatos de emerg√™ncia
      await this.notifyEmergencyContacts(location);
      
      // Inicia grava√ß√£o de √°udio/v√≠deo
      await this.startEmergencyRecording();
      
      Alert.alert(
        'Modo de Emerg√™ncia Ativado',
        'Autoridades e contatos de emerg√™ncia foram notificados.',
        [{ text: 'OK' }]
      );
    } catch (error) {
      console.error('Erro ao ativar modo de emerg√™ncia:', error);
      throw error;
    }
  }

  // Hist√≥rico detalhado com fotos e avalia√ß√µes
  async saveServiceHistory(serviceId: string, photos: string[], rating: number, comments: string): Promise<void> {
    try {
      const historyData = {
        serviceId,
        photos,
        rating,
        comments,
        timestamp: new Date().toISOString(),
        location: await Location.getCurrentPositionAsync({})
      };

      const existingHistory = await AsyncStorage.getItem('service_history');
      const history = existingHistory ? JSON.parse(existingHistory) : [];
      history.push(historyData);
      
      await AsyncStorage.setItem('service_history', JSON.stringify(history));
    } catch (error) {
      console.error('Erro ao salvar hist√≥rico:', error);
      throw error;
    }
  }

  // M√©todos privados auxiliares
  private async sendLocationToServer(locationData: LocationData): Promise<void> {
    // Implementar l√≥gica de envio para o servidor
    console.log('Enviando localiza√ß√£o:', locationData);
  }

  private async sendEmergencyAlert(location: Location.LocationObject): Promise<void> {
    // Implementar l√≥gica de envio de alerta para autoridades
    const emergencyMessage = `üö® ALERTA DE EMERG√äNCIA üö®\nLocaliza√ß√£o: ${location.coords.latitude}, ${location.coords.longitude}`;
    console.log('Enviando alerta:', emergencyMessage);
  }

  private async notifyEmergencyContacts(location: Location.LocationObject): Promise<void> {
    // Implementar l√≥gica de notifica√ß√£o para contatos de emerg√™ncia
    for (const contact of this.emergencyContacts) {
      console.log(`Notificando contato: ${contact.name}`);
    }
  }

  private async startEmergencyRecording(): Promise<void> {
    // Implementar l√≥gica de grava√ß√£o de √°udio/v√≠deo
    console.log('Iniciando grava√ß√£o de emerg√™ncia');
  }
}

export default SecurityService; 